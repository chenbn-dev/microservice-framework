要完整跑通所有的微服务，请参考该文档。

构建一个模块的固定步骤：1.建modle；2.修改pom.xml；3.添加yml；4.建主启动类；5.建业务类

1.第一个模块：微服务的提供者，cloud-provider-payment8001（注意数据库库名和账号密码配置。）（业务类细节，请参考各类型文件注释）。
  启动 PaymentMain8001 主启动类，测试get查询方法和post插入数据方法：
  get请求地址： http://localhost:8001/payment/get/1          （注意，数据库要插入1号数据）
  post请求地址：http://localhost:8001/payment/create?serial=chbn002  （postman测试地址）

2.第二个模块：客户端消费者。cloud-consumer-order80，80服务要去调用8001的服务，最原始的方式就会HttpClient；
  这里我们用restTemplate，相当于将HttpClient做了一次封装，实现了订单微服务和支付微服务之间的横向调用，完成80到8001的
  远程调用（restTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问
  Rest服务的客户端模板工具集）。
  RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集
  官网：
  https://docs.spring.io/spring-framework/docs/4.3.7.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html
  使用restTemplate访问restful接口非常的简单粗暴无脑。
   (url, requestMap, ResponseBean.class)这三个参数分别代表
   REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。

  先启动8001服务，然后启动80服务。访问：http://localhost/consumer/payment/get/1  80端口号可以省略，端口号不要暴露给消费者。
  没有写端口号默认就是80，模拟从外部互联网访问，只要路径中加“consumer”就说明来自消费者。
  查询到数据即成功。

  插入操作访问：http://localhost/consumer/payment/create?serial=cbn001

  代码重构：通过maven的聚合父工程，将相同，相似重复的代码，将其提到一个公开公用的工程中，供各子系统统一调用。

3.新建新的工程cloud-api-commons，可以提交我们重复的代码，而且我们的一些服务接口及第三方接口，工具类，都可以放在这个工程里面。
  因为不对外暴露，所以没有端口号将公共模块打包发布到maven本地仓库，将80和8001中的entitis包即下面的类删除，在它们的pom.xml当中引入坐标。启动测试。

4.新建eureka server类：cloud-eureka-server7001，服务注册中心，主要就是注册，不需要在写业务类，注意标明@EnableEurekaServer注解，表示
  该类是一个eureka server。
  启动该模块组启动类，访问：localhost:7001
  将cloud-provider-payment8001注册进EurekaServer；将cloud-consumer-order80注册进EurekaSrever

5.新建cloud-eureka-server7002，cloud-eureka-server7003，cloud-eureka-server7004服务，搭建Eureka集群。
  pom.xml添加依赖，添加application.yml配置文件，hosts文件做端口映射，模拟集群环境，相继启动4个服务，
  逐一访问"http://eureka7002.com:7002/"这4个服务，看集群是否搭建成功。

6.配置8001和80的yml文件，将8001和80两个微服务，注册进eureka集群。

7.搭建服务提供者集群，然后修改端口8001——8005逐一测试服务提供者是否正常：" http://localhost:8001/payment/get/1 "，如果所有服务提供
  者服务全部能正常提供服务，则将消费者80默认访问地址"http://localhost:8001"改为服务提供者集群名称"http://cloud-payment-service",
  并在消费者80的配置类中添加"@LoadBalanced"注解，以提供默认的负载均衡功能，测试通过Eureka集群服务提供者是否能够为消费者80，提供正常的服务"http://localhost/consumer/payment/get/1"。
8.完善微服务信息
9.服务的发现：对于注册eureka里面的微服务,可以通过服务发现来获得该服务的信息。
  微服务自身要对外提供一种功能，它的IP，服务名称，端口号等；
  即Eureka中注册了这么多服务，那么它对外暴露的服务，各自的信息是什么？说白了就是拿到Eureka上面注册成功的微服务的信息
  8001~8005统统注册进Eureka集群，假设80想看看端口号，服务名，怎么能取得到信息。
  修改8001的Controller。不在客户端上面配置，通过访问8001端口，自测来看看关于8001的微服务有哪些内容。
10.Eureka的自我保护：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存。
   禁用Eureka的自我保护机制。

11.新建8006，向zookeeper中注册的服务提供者。
   注意zookeeper的jar包冲突，zookeeper自己带的版本和服务器上安装的版本不一样。在8006的pom文件中，先排除自带版本，在引入和服务器一样的版本。
   zookeeper不会像Eureka有自我保护机制，当在一定时间片内收不到某个服务的心跳之后，会直接将该服务信息清除。
   当该服务再次接入时，zookeeper会生成新的流水号，说明zookeeper的服务结点是临时节点。
   CAP理论中的AP和CP，zookeeper注重CP。

12.官网下载consol客户端并解压consul.exe可执行文件，在控制住台执行"consul agent -dev"启动consol，并通过"localhost:8500"，
   看到consol的界面，此时就代表服务注册中心consol安装并运行成功。
13.新建向consol中注册的服务提供者模块"cloud-providerconsul-payment8007", 启动8007主启动类，看consol的服务端图形界面是否出现新
   注册的服务名，并通过"http://localhost:8007/payment/consul"访问，服务是否可以访问。
14.新建向consol中注册的服务消费者模块"cloud-consumerconsul-order80",启动80主启动类，看consol的服务端图形界面是否出现新
   注册的服务名，并通过"http://localhost/consumer/payment/consul"访问，服务是否可以访问。

15.Eureka，zookeeper，consul三个注册中心异同点：
   Eureka是AP，主要保证A高可用；而zookeeper，consul注重的是CP，主要保证C数据一致性。

   CAP理论：C（强一致）；A（高可用）；P（分区容错性）。
   分区容忍性：分布式系统在遇到任何网络分区故障的时候，仍然能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。
              （系统部分节点出现故障后，连接正常节点还可以使用系统提供的服务）。
   一致性：读操作总是能读取到之前完成的写操作结果，满足这个条件的系统称为强一致系统，这里的“之前”一般对同一个客户端而言；
   可用性：读写操作在单台机器发生故障的情况下仍然能够正常执行，而不需要等待发生故障的机器重启或者其上的服务迁移到其他机器；
   分区可容忍性：机器故障、网络故障、机房停电等异常情况下仍然能够满足一致性和可用性。
   原文链接：https://blog.csdn.net/zhangyufeijiangxi/article/details/78286364
   ***************************************************************************************************************************
   分布式系统中，有三种重要的属性，分别是：
   一致性(Consistency)：任何一个读操作总是能读取到之前完成的写操作结果，也就是在分布式环境中，多点的数据是一致的。
   可用性(Availability)：每一个操作总是能够在确定的时间内返回，也就是系统随时都是可用的。
   分区容忍性(Tolerance of network Partition)：在出现网络分区（比如断网）的情况下，分离的系统也能正常运行。
   CAP原理的意思是，一个分布式系统不能同时满足一致性，可用性和分区容错性这三个需求，最多只能同时满足两个。
   这里可用性和分区容忍性大家会很容易混淆，在这里表达下个人的理解：
   可用性，我们一般认为系统正常提供服务为可用，常用服务时间/时间 来衡量系统可用性。但是这个CAP理论，分区容错性充当了部分“可用性”的角色，
   其表示当部分节点挂了系统依然能提供服务，除非所有节点都挂掉。而上面的A，更多是指服务质量，注意定义中的“一定时间内返回”，理解起来是说我
   们日常理解的“性能”，当然，我们平时理解的可用性，也是包括性能指标的，因为所谓的可用，其实是在一定的处理时间要求下的服务提供，长时间的用
   户等待必然导致服务没有用。
   所以，CAP理论其实是指“一致性”、“服务质量（性能、时延）”和“可用性”三者不可得兼，个人认为非常有指导意义
   原文链接：https://blog.csdn.net/abc86319253/article/details/50638721
   ***************************************************************************************************************************

   由于现在分布式微服务架构，P永远都要保证，所以，分布式系统要么是CP，要么是AP；
   Eureka的自我保护机制强调的是AP，保证微服务的高可用。

16.替换Ribbon的负载均衡算法：官方文档明确给出了警告，这个自定义配置类不能放在@ComponentScan所扫描的当前包及其子包下，否则我们自定义
   的这个配置类就会被所有的Ribbon客户端共享，达不到特殊化定制的目的。

17.OpenFeign：Feign就是一个服务接口绑定器，接口+注解的形式。
   新建"cloud-consumer-feign-order80"，并完成OpenFeign的编码和调用
   完善OpenFeign超时控制,OpenFeign日志打印功能

18.Hystrix已停止更新，但是设计理念非常优秀，出道即巅峰，服务降级，熔断，限流，隔离等思想。
   服务降级：fallback，当服务器忙时,给用户“请稍后再试”等提示,不让客户端等待并立刻返回一个友好提示。但是服务并没有停，系统可用。
   服务熔断：break，类比保险丝达到最大服务访问后,直接拒绝访问,拉闸限电,然后调用服务降级的方法并返回友好提示。
            先熔断，再会调用服务降级的方法，返回友好提示，此时服务已停止，系统不可用。
   服务限流：flowlimit，高并发限流

19.利用hystrix为服务提供端和服务消费端配置服务降级。
   解决服务降价的方法重复导致的代码冗余问题；
   重新新建一个类(PaymentFallbackService)实现PaymentHystrixService接口,统一为接口里面的方法进行异常处理。
20.服务监控hystrixDashboard仪表盘配置。









































